<template>
    <div class="paperform-form">
        <table class="tg" v-if="false"></table>

        <table class="tg">
            <thead>
            <tr>
                <th class="tg-yw4l tranThreeBorders" colspan="11" rowspan="4"></th>
                <th class="tg-s6z2" rowspan="4">情<br>感</th>
                <th class="tg-031e" rowspan="4">人<br>际<br>关<br>系</th>
                <th class="tg-031e" rowspan="4">物<br>品<br>喜<br>好</th>
                <th class="tg-031e" rowspan="4">感<br>觉<br>模<br>式</th>
                <th class="tg-031e" rowspan="4">语<br>言</th>
                <th class="tg-031e" rowspan="4">
                    &nbsp;&nbsp;&nbsp;
                </th>
                <th class="tg-031e" rowspan="4">模<br>仿</th>
                <th class="tg-031e" rowspan="4">知<br>觉</th>
                <th class="tg-031e" rowspan="4">精<br>细<br>动<br>作</th>
                <th class="tg-031e" rowspan="4">粗<br>大<br>动<br>作</th>
                <th class="tg-031e" rowspan="4">手<br>眼<br>协<br>调</th>
                <th class="tg-031e" rowspan="4">认<br>知<br>表<br>现</th>
                <th class="tg-031e" rowspan="4">口<br>语<br>认<br>知</th>
            </tr>
            <tr>
            </tr>
            <tr>
            </tr>
            <tr>
            </tr>
            </thead>

            <template v-for="unit in testResultData">
                <tr>
                    <td class="tg-yw4l leftAlign tranFourBorders" colspan="11">
                        {{ unit.MaterialType}}
                    </td>
                    <td class="tg-yw4l" colspan="13" style="border-right: transparent;border-left: transparent"></td>
                </tr>
                <tr v-for="ele in unit.sameArr">
                    <td class="tg-yw4l leftAlign tranThreeBorders" colspan="11">
                        {{ele.Number}}&nbsp;&nbsp;{{ ele.Name}}
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </td>
                    <td class="tg-yw4l">{{ ele.Domain === '情感'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '人际关系'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '物品喜好'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '感觉模式'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '语言'? ele.Result: ' '}}</td>

                    <td class="tg-yw4l"></td>

                    <td class="tg-yw4l">{{ ele.Domain === '模仿'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '知觉'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '精细动作'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '粗大动作'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '手眼协调'? ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '认知表现'?ele.Result: ' '}}</td>
                    <td class="tg-yw4l">{{ ele.Domain === '口语认知'? ele.Result: ' '}}</td>
                </tr>
            </template>

            <tfoot>
                <tr></tr>
                <tr>
                    <td class="tg-yw4l tranThreeBorders" colspan="11" rowspan="3"></td>
                    <th class="tg-031e" rowspan="2">
                        情<br>感
                    </th>
                    <td class="tg-031e" rowspan="2">关<br>系</td>
                    <td class="tg-031e" rowspan="2">喜<br>好</td>
                    <td class="tg-031e" rowspan="2">感<br>觉</td>
                    <td class="tg-031e" rowspan="2">语<br>言</td>
                    <td class="tg-031e onlySides" rowspan="2"></td>
                    <td class="tg-031e" rowspan="2">模<br>仿</td>
                    <td class="tg-031e" rowspan="2">知<br>觉</td>
                    <td class="tg-031e" rowspan="2">细<br>动</td>
                    <td class="tg-031e" rowspan="2">粗<br>动</td>
                    <td class="tg-031e" rowspan="2">协<br>调</td>
                    <td class="tg-031e" rowspan="2">认<br>知</td>
                    <td class="tg-031e" rowspan="2">口<br>语</td>
                </tr>
                <tr>
                </tr>
                <tr>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l">

                    </td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l onlySides"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                </tr>
                <tr>
                    <td class="tg-lqy6 rightAlign tranThreeBorders" colspan="11">A</td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l onlySides">P</td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                </tr>
                <tr>
                    <td class="tg-lqy6 rightAlign tranThreeBorders" colspan="11">M</td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l onlySides">E</td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                </tr>
                <tr>
                    <td class="tg-lqy6 rightAlign tranThreeBorders" colspan="11">S</td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l onlySides">F</td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                    <td class="tg-yw4l"></td>
                </tr>
            </tfoot>
        </table>

        <div id="canvasArea" v-if="true">
            <div style="width:600px">
                <canvas id="b" width=600 height=720 style="border:1px solid grey"></canvas>
            </div>
            <div style="visibility: hidden">
                <button @click="drawDevelopChart(lineData)">加载图表</button>
            </div>
        </div>
        <div id="developChartWrap" v-if="true">
            <div style="float:left;width:600px">
                <canvas id="c" width=600 height=720 style="border:1px solid grey"></canvas>
            </div>
            <div style="visibility: hidden">
                <button @click="drawDevelopChart(lineData)">加载图表</button>
            </div>
        </div>
    </div>

</template>

<script>
    import api from '../api/index.js';
    export default {
        name: 'printCECP',
        data() {
            return {
                frstMaterialType: '',
                difMaterialTypeEle: '',
                testResultData: '',
                roundData: [],
                lineData: []
            }
        },
        computed: {
            cpPacientID: function () {
                return this.$store.state.mystudent.currentPatientId.ID
            },
            cpTestID: function () {
                return this.$store.state.mystudent.cpepTestID
            }
        },
        methods: {
            getSourceData(urlArr) {
                let arr =  urlArr.TestResult.map(function (ele) {
                    return ele.MaterialType;
                }).filter(function(element,index,arr){
                    return arr.indexOf(element) === index;
                }).map(function (ele) {
                    let sameMaterial = []
                    let obj = {
                        material: ele,
                        sameArr: sameMaterial
                    }
                    return obj
                });
                urlArr.TestResult.forEach(function (ele) {
                    for (let i = 0; i< arr.length; i++) {
                        if (arr[i].material === ele.MaterialType) {
                            arr[i].sameArr.push(ele)
                        }
                    }
                })
                return arr
            },
            rquestData() {
                let params = {
                    testId: this.cpTestID,
                    PatientAgentID: this.cpPacientID,
                    PageIndex: 1,
                    PageSize: 10
                };
                api.getCPEPReport(params).then(res => {
                    var urlArr =  res.data.Data;
                    this.testResultData = this.getSourceData(urlArr)
                    let originData = urlArr.Result
                    for (let i = 0;i < 5;i++) {
                        this.roundData.push(originData[i])
                    }
                    this.drawRound(this.roundData);
                    for (let j = 5;j < originData.length;j++) {
                        this.lineData.push(originData[j])
                    }
                    this.drawDevelopChart(this.lineData);
                })
            },
            setNowMaterialType(param) {
                if (param.MaterialType === this.frstMaterialType) {
                    return true
                } else {
                    this.difMaterialTypeEle = param;
                    this.frstMaterialType = param.MaterialType;
                    return false;
                }
            },
            drawRound(roundData) {
                console.log('roundData')
                console.log(roundData)
                console.log(roundData.length)
                CanvasRenderingContext2D.prototype.sector = function (x, y, radius, sAngle, eAngle, counterclockwise, total, storeS, storeM, img) {
                    let distance = radius / total
                    for (let i = total - 1; i >= 0; i--) {
                        this.save()
                        this.beginPath()
                        this.translate(x, y);
                        this.arc(0, 0, distance + distance * i, sAngle, eAngle, counterclockwise)
                        this.save();
                        this.rotate(eAngle);
                        this.moveTo(distance + distance * i, 0)
                        this.lineTo(0, 0)
                        this.restore()
                        this.rotate(sAngle)
                        this.lineTo(distance + distance * i, 0)
                        this.strokeStyle = '#000'
                        this.stroke()

                        if ( i >= storeS && i< storeS + storeM) {
                            var _this = this;
                            img.onload = (function(img) {
                                return function() {
                                    var pattern = _this.createPattern(img,"repeat");
                                    _this.fillStyle = pattern;
                                }
                            })(img)
                        }
                        if (storeS !== 0 && i < storeS) {
                            this.fillStyle = '#cccccc'
                            this.fill()
                        }
                        this.restore()
                    }
                    return this;
                };
                let canvasWrap = document.getElementById('canvasArea')
                var canvas = document.getElementById("b");
                let ctx = canvas.getContext('2d');
                let deg = Math.PI / 180;
                var img = new Image();    //创建Image对象
                img.src = 'http://osp49ppau.bkt.clouddn.com/xiexian.png';


                ctx.sector(200, 200, 100, 324 * deg, 36 * deg, false, 7, 3, 2, img)
                ctx.sector(200, 200, 100, 36 * deg, 108 * deg, false, 6, 3, 2, img)
                ctx.sector(200, 200, 100, 108 * deg, 180 * deg, false, 14, 4, 1,img);
                ctx.sector(200, 200, 100, 180 * deg, 252 * deg, false, 11,6, 1, img);
                ctx.sector(200, 200, 100, 252 * deg, 324 * deg, false, 6, 2, 1, img);
                this.convertCanvasToImage(canvas)
                canvasWrap.removeChild(canvasWrap.childNodes[0])
            },
            convertCanvasToImage(canvas) {
                let image = new Image();
                image.src = canvas.toDataURL("image/png");
                document.getElementById('canvasArea').appendChild(image)
            },
            chartConvertCanvasToImage(canvas) {
                let image = new Image();
                image.src = canvas.toDataURL("image/png");
                document.getElementById('developChartWrap').appendChild(image)
            },
            drawDevelopChart(lineData) {
                console.log('lineData')
                console.log(this.lineData)
                let canvasWrap = document.getElementById('developChartWrap')
                var myCanvas = document.getElementById("c");
                var c = myCanvas.getContext("2d");
                var w = 600;
                var h = 680;
                var head = 40;
                var count = 80;
                var categories = ['年龄（岁）', '模仿', '知觉', '精细动作', '粗大动作', '手眼协调', '认知表现', '口语认知', '总评分', '年龄（岁）']
                draw()
                this.chartConvertCanvasToImage(myCanvas)
                canvasWrap.removeChild(canvasWrap.childNodes[0])

                function draw() {
                    drawCategory()
                    c.beginPath()
                    c.moveTo(60, head);
                    c.lineTo(60, head + h);
                    c.strokeStyle = '#000'
                    c.stroke()
                    drawBaseLine()
                    drawGrap()
                    drawData()
                    darwDymaLine();
                }
                function darwDymaLine() {

                }
                function drawCategory() {
                    let tickSize = 60
                    let tickCnt = 10
                    for (var i = 0; i < tickCnt; i++) {
                        c.beginPath()
                        c.rect(tickSize * i, 0, 60, 40)
                        c.strokeStyle = '#000'
                        c.font = "10px serif";
                        c.textAlign = 'center';
                        c.fillText(categories[i], 30 + tickSize * i, 20);
                        c.stroke()
                    }
                }

                function drawGrap() {
                    let tickSize = 60
                    let tickCnt = 10
                    for (var i = 0; i < tickCnt; i++) {
                        if (1 < i < tickCnt) {
                            c.beginPath()
                            c.moveTo(tickSize * i, head);
                            c.lineTo(tickSize * i, head + h);
                            c.strokeStyle = '#000'
                            c.stroke()
                        }
                    }
                }

                function drawBaseLine() {
                    c.clearRect(0, 40, w, h);
                    var tickSize = h / count
                    c.moveTo(0, head);
                    c.lineTo(0, head + h);
                    for (var i = 1; i < count; i++) {
                        c.beginPath()
                        c.moveTo(0, 40 + tickSize * i);
                        c.lineTo(w, 40 + tickSize * i);
                        c.strokeStyle = '#efefef'
                        c.stroke();
                    }
                }

                function drawData() {
                    //年龄（岁）
                    let tickSize = 60
                    for (var i = 1; i < 7; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 0 + 0, 40 + (count - 12 * i) / count * h);
                        c.lineTo(tickSize * 0 + 15, 40 + (count - 12 * i) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 0 +20, 45 + (count - 12 * i) / count * h);
                        c.stroke();
                    }


                    //模仿  0-10
                    var arr2 = [23, 25, 28, 30, 32, 35, 37, 39, 42, 44, 62]
                    for (var i = 0; i < 11; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 1 + 0, 40 + (count - arr2[i]) / count * h);
                        c.lineTo(tickSize * 1 + 15, 40 + (count - arr2[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 1 + 20, 45 + (count - arr2[i]) / count * h);
                        c.stroke();
                    }

                    //知觉 0-11
                    var arr3 = [10, 14, 19, 23, 28, 32, 37, 41, 46, 50, 54, 60]
                    for (var i = 0; i < 12; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 2 + 0, 40 + (count - arr3[i]) / count * h);
                        c.lineTo(tickSize * 2 + 15, 40 + (count - arr3[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 2 + 20, 45 + (count - arr3[i]) / count * h);
                        c.stroke();
                    }

                    //精细动作 0-10
                    var arr4 = [22, 25, 28, 31, 33, 36, 39, 42, 45, 55, 71]
                    for (var i = 0; i < 11; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 3 + 0, 40 + (count - arr4[i]) / count * h);
                        c.lineTo(tickSize * 3 + 15, 40 + (count - arr4[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 3 + 20, 45 + (count - arr4[i]) / count * h);
                        c.stroke();
                    }

                    //粗大动作 0-11
                    var arr5 = [21, 24, 26, 28,30,32,35,37,39,41,44,60]
                    for (var i = 0; i < 12; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 4 + 0, 40 + (count - arr5[i]) / count * h);
                        c.lineTo(tickSize * 4 + 15, 40 + (count - arr5[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 4 + 20, 45 + (count - arr5[i]) / count * h);
                        c.stroke();
                    }

                    //手眼协调 0-14
                    var arr6 = [12, 16, 20, 24, 28, 32, 37, 41, 45, 49, 53, 57, 62, 66, 70]
                    for (var i = 0; i < 15; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 5 + 0, 40 + (count - arr6[i]) / count * h);
                        c.lineTo(tickSize * 5 + 15, 40 + (count - arr6[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 5 + 20, 45 + (count - arr6[i]) / count * h);
                        c.stroke();
                    }

                    //认知表现 0-20
                    var arr7 = [13,16,20,23,25,28,31,34,37,41,44,47,50,53,56,59,62,65,68,71,74]
                    for (var i = 0; i < 21; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 6 + 0, 40 + (count - arr7[i]) / count * h);
                        c.lineTo(tickSize * 6 + 15, 40 + (count - arr7[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 6 + 20, 45 + (count - arr7[i]) / count * h);
                        c.stroke();
                    }

                    //口语认知 0-19
                    var arr8 = [21,24,27,30,33,36,39,42,45,47,50,53,56,59,62,65,68,71,74,76]
                    for (var i = 0; i < 21; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 7 + 0, 40 + (count - arr8[i]) / count * h);
                        c.lineTo(tickSize * 7 + 15, 40 + (count - arr8[i]) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 7 + 20, 45 + (count - arr8[i]) / count * h);
                        c.stroke();
                    }

                    //总评分 0-95
                    var arr9 = [
                        {sc: 0,y: 8},  {sc: 1,y: 9},   {sc: 2,y: 10},   {sc: 3,y: 11}, {sc: 4,y: 12}, {sc: 5,y: 13}, {sc: 6,y: 14}, {sc: 7,y: 15}, {sc: 8,y: 16},
                        {sc: 9,y: 17}, {sc: 10,y: 18}, {sc: 11,y: 19}, {sc: 12,y: 20}, {sc: 13,y: 21}, {sc: 14,y: 22}, {sc: 15,y: 23}, {sc: 16,y: 24}, {sc: 18,y: 25},
                        {sc: 20,y: 26}, {sc: 23,y: 27}, {sc: 26,y: 28}, {sc: 28,y: 29}, {sc: 31,y: 30}, {sc: 34,y: 31}, {sc: 37,y: 32}, {sc: 39,y: 33}, {sc: 42,y: 34},
                        {sc: 45,y: 35}, {sc: 47,y: 36}, {sc: 50,y: 37}, {sc: 52,y: 38}, {sc: 55,y: 39}, {sc: 58,y: 40}, {sc: 61,y: 41}, {sc: 63,y: 42}, {sc: 66,y: 43},
                        {sc: 69,y: 44}, {sc: 71,y: 45}, {sc: 73,y: 47}, {sc: 74,y: 49}, {sc: 75,y: 50}, {sc: 76,y: 52}, {sc: 77,y: 53}, {sc: 78,y: 55}, {sc: 79,y: 56},
                        {sc: 80,y: 58}, {sc: 81,y: 59}, {sc: 82,y: 60}, {sc: 83,y: 62}, {sc: 84,y: 63}, {sc: 85,y: 65}, {sc: 86,y: 66}, {sc: 87,y: 68}, {sc: 88,y: 69},
                        {sc: 89,y: 70}, {sc: 90,y: 72}, {sc: 91,y: 73}, {sc: 92,y: 75}, {sc: 93,y: 76}, {sc: 94,y: 78}, {sc: 95,y: 79},
                    ]
                    for (var i = 0; i < 61; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 8 + 0, 40 + (count - arr9[i].y) / count * h);
                        c.lineTo(tickSize * 8 + 15, 40 + (count - arr9[i].y) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(arr9[i].sc, tickSize* 8 + 20, 45 + (count - arr9[i].y) / count * h);
                        c.stroke();
                    }

                    for (var i = 1; i < 7; i++) {
                        c.beginPath()
                        c.moveTo(tickSize * 10 - 15, 40 + (count - 12 * i) / count * h);
                        c.lineTo(tickSize * 10, 40 + (count - 12 * i) / count * h);
                        c.strokeStyle = '#000'
                        c.textAlign = 'center';
                        c.fillText(i, tickSize* 10 - 20, 45 + (count - 12 * i) / count * h);
                        c.stroke();
                    }
                }
            },
        },
        created() {
            console.log('created')
//            this.rquestData()
        },
        mounted() {
            console.log('mounted')
            this.rquestData()


        }
    }
  </script>
<style scoped>
    .tg  {border-collapse:collapse;border-spacing:0;}
    .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
    .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
    .tg .tg-baqh{text-align:center;vertical-align:top}
    .tg .tg-nrw8{font-size:14px}
    .tg .tg-yw4l{vertical-align:top}

    .tg  {border-collapse:collapse;border-spacing:0;}
    .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
    .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
    .tg .tg-s6z2{text-align:center}
    .tg .tg-yw4l{vertical-align:top}

    .leftAlign {
        text-align: left;
    }
    .rightAlign {
        text-align: right;
    }

    .tranFourBorders {
        border: transparent;
    }
    .tranThreeBorders {
        border-top: transparent;
        border-bottom: transparent;
        border-left: transparent;
    }
    .onlyBottom {
        border-top: transparent;
        border-right: transparent;
        border-left: transparent;
    }
    .onlySides {
        border-top: transparent;
        border-bottom: transparent;
    }

    .fourBorder {
        display: block;
        border: 1px solid #000000;
    }

</style>
