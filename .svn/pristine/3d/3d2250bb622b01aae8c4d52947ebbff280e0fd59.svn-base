<template>
    <div class="testPaper">
        <div class="studentBox">

            <el-row :gutter="10">
                <el-col :xs="8" :sm="8" :md="8" :lg="8">
                    <el-select v-model="selectedPacientIDS" placeholder="请选择小组" @change="filterPacient">
                        <el-option
                                v-for="(item, index) in selectedGroup"
                                :key="item.groupName"
                                :label=item.groupName
                                :value=index>
                        </el-option>
                    </el-select>
                </el-col>

                <el-col :xs="8" :sm="8" :md="8" :lg="8">
                    <el-select v-model="patientAgents" multiple placeholder="请选择患者" ref="pacientesSelecter">
                        <el-option
                                v-for="(item, index) in selectedGroupPacientes"
                                :key="item.Name"
                                :label=item.Name
                                :value=item.PatientID>
                        </el-option>
                    </el-select>
                </el-col>
            </el-row>

        </div>
        <div class="formBox">
                <div class="tabs">
                    <div class="tabs-chose">
                        <li v-for="(paper, index) in testPaperContentData.Papers"
                            :class="{active : currentTab === index }"
                            @click="currentTab = index">
                            <p>{{paper.Name}}</p>
                        </li>
                    </div>
                    <div class="tabs-content">
                        <div v-show="currentTab === paperIndex" class="tab-content" v-for="(paper, paperIndex) in testPaperContentData.Papers">
                            <div class="questionBox">
                                <div v-for="(section, sectionIndex) in paper.Sections">
                                    <h1 class="chaptTitle">{{sectionIndex}}章节: {{section.Name}}</h1>
                                    <div v-for="(question, questionIndex) in section.Questions">
                                        <p class="questionDescrib">{{sectionIndex}}.{{questionIndex}}{{ question.Description}}</p>
                                        <div v-for="(option, optionIndex) in question.Options">
                                            <input  type="radio" :value="option.Sequence" :name="question.Description" v-model="testPaperFormData.Papers[paperIndex].Sections[sectionIndex].Questions[questionIndex].Result"  >
                                            <label >{{ option.Name }}</label>
                                        </div>
                                        <br>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


        </div>


        <div class="submitBox">
            <el-button type="primary" @click="submitTestContent">完成</el-button>
        </div>

    </div>
</template>
<script>
    import { getTestPaperContent, sendTestPaper } from '../../../api/api';
    export default {
        name: 'testPaper',
        data() {
            return {
                questionAnswers: [],
                testPaperContentData: [],
                testPaperFormData: [],
                updateData: [],
                currentTab: 0,
                selectedGroup: this.$store.state.mystudent.patientList,
                selectedPacientIDS: '',
                selectedGroupPacientes: [],
                patientAgents: [],
                testID: ''
            };
        },
        methods: {
            requesTestPaperData() {
                console.log('所传的值');
                console.log(this.$route.params);
                let paperPackageID = this.$route.params.course_id;
                this.testID = this.$route.params.id;
                getTestPaperContent(paperPackageID).then(res => {
                    console.log('测试内容');
                    console.log(res);
                  this.testPaperFormData = Object.assign({},res);
                    this.testPaperContentData = res;
                });
            },
          submitTestContent() {
            let qustionAnswers = [];
            let originData = this.testPaperFormData.Papers;
            for(let i=0;i<originData.length;i++) {   //试卷

              for (let j = 0; j < originData[i].Sections.length; j++) {  //章节

                for (let k = 0; k < originData[i].Sections[j].Questions.length; k++) {  //问题

                  let unitForm = {
                    QuestionID: originData[i].Sections[j].Questions[k].ID,
                    Result: originData[i].Sections[j].Questions[k].Result
                  };
                  console.log('单个问题');
                  console.log(unitForm);
                  qustionAnswers.push(unitForm);
                }
              }
            }
            console.log('已经填写的表单');
            console.log(qustionAnswers);
            let params = {
                ExamID: this.testID,
                PatientAgents: this.patientAgents,
                Result: qustionAnswers
            };
              console.log('提交的内容');
              console.log(params);
            sendTestPaper(params).then(res => {
                if(res.Code === 0) {
                    this.$message.success('正常');
                    this.$parent.tabsShow = false;
                } else if(res.Code === 1){
                    this.$message.wraning('指定的评估不存在');
                } else if(res.Code === 2) {
                    this.$message.wraning('指定的评估不属于当前用户');
                } else if(res.Code === 3) {
                    this.$message.wraning('请指定患者');
                } else if (res.Code === 4) {
                    this.$message.wraning('指定的患者不属于当前医生');
                } else {
                    this.$message.error(res.Msg);
                }
            });
          },
          filterPacient(val) {
            this.selectedGroupPacientes = this.selectedGroup[val].groupPatients;
          },
            setFormData(res) {
                let formContaioner = [];
                let updataitmes= [];
//                let unitForm = {
//                    QuestionID: '',
//                    Result: ''
//                };
                //解开for循环，得到一个三层嵌套数组。
                let originData = res.Papers
                for(let i=0;i<originData.length;i++){   //试卷

                    for (let j=0;j<originData[i].Sections.length;j++) {  //章节
                        for (let k=0;k<originData[i].Sections[j].Questions.length;k++) {  //问题
                          formContaioner.push(originData[i].Sections[j].Questions[k]);
                          let unitForm = {
                            QuestionID: originData[i].Sections[j].Questions[k].ID,
                            Result: ''
                          };
                          updataitmes.push(unitForm);
//                            for (let l=0;l<originData[i].Sections[j].Questions[k].Options.length;l++) { //选项
                        }
                    }
                }
                this.testPaperFormData = formContaioner;
                this.updateData = updataitmes;
                console.log('表单数组的内容');
                console.log(this.testPaperFormData);
            }
        },
        mounted() {
            this.requesTestPaperData();
        }
    };
</script>
<style scoped>
    .testPaper {position: absolute;width: 100%;top: 40px;left: 0;height: 586px;z-index: 10;}
    .studentBox {width: 1180px;height: 56px;margin: 0 auto}
    .tabs {position: relative;width: 1180px;height: 428px;margin: 0 auto}
    .submitBox{width: 100%;height: 102px;display: flex;justify-content: center;align-items: center}
    .formBox {position: relative;width: 100%;height: 428px}
    .tabs-chose {position: absolute;width: 94px;height: 428px;background-color: #EEEFF0;border-right: 1px solid #EFEFEF;}
    .tabs-content {
        position: absolute;
        left: 94px;
        top: 0;
        width: 1185px;
        height: 428px;
        overflow-y: scroll
    }
    .tab-content {
        width: 1100px;
        margin: 30px auto;
    }
    .tabs-chose li{
        width: 94px;
        height: 60px;
        background-color: RGBA(238, 239, 240, 1.00);
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .tabs-chose .active {
        background-color: #ffffff;
        color: RGBA(32, 160, 255, 1.00);
        border-left: 6px solid #31BBFC;
    }
    .optionsSpace {width: 100%;height: 20px}
    .testWrap {width: 100px}
    .questionDescrib {font-size: 16px}
    .chaptTitle {
        font-size: 1.667em;
        font-weight: normal;
        color: #222;
        text-align: left;
    }
</style>
