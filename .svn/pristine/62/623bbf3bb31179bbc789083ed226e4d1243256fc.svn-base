<template>
  <div class="tabs">

    <div class="tabsChoserWrap">
      <div class="tabs-chose">
        <li v-for="(tab, index) in tabs" :class="{active : currentTab === index }" @click="currentTab = index">{{tab}}
        </li>
      </div>
    </div>

    <div class="tabContentWrap">
      <div class="tabs-content">
        <div v-for="(tab,index) in tabs" class="tab-content" v-show="currentTab === index">
          <div v-if="index === 0">
            <ConsultManage></ConsultManage>
          </div>
          <div v-if="index === 1">
            <el-dialog title="服务编辑" v-model="editFormVisible" :close-on-click-modal="false">
              <el-form ref="addServiceformEle" :model="addServiceform" label-width="80px">
                <el-form-item label="服务图例">
                  <el-upload class="avatar-uploader" :action="getuploadURL()" :headers="getAuth()" :show-file-list="false" :on-success="handleAvatarScucess" :before-upload="beforeAvatarUpload">
                    <img v-if="imageUrl" :src="imageUrl" class="avatar" v-model="addServiceform.Logo" style="width: 84px;height: 84px">
                      <i v-else class="icon iconfont icon-upload" style="font-size: 50px"></i>

                  </el-upload>
                </el-form-item>

                <el-form-item label="服务名称:">
                  <el-input v-model="addServiceform.Name"></el-input>
                </el-form-item>

                <el-form-item label="服务价格:">
                  <el-input v-model="addServiceform.Price"></el-input>
                </el-form-item>

                <el-form-item label="单次服务咨询次数:">
                  <el-input v-model="addServiceform.Count"></el-input>
                </el-form-item>

                <el-form-item label="服务地址:">
                  <el-input v-model="addServiceform.Location"></el-input>
                </el-form-item>

                <el-form-item label="服务类型:">
                  <el-select v-model="categroryType" placeholder="请选择">
                    <el-option label="评估" value="1"></el-option>
                    <el-option label="训练" value="2"></el-option>
                    <el-option label="教学" value="3"></el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="病种选择:">
                  <el-select v-model="tagsArr" multiple placeholder="请选择">
                    <el-option v-for="item in tagsOptions" :key="item.ID" :label="item.Name" :value="item.ID">
                    </el-option>
                  </el-select>
                </el-form-item>


                <el-form-item label="服务详情:">
                  <el-input type="textarea" v-model="addServiceform.Comments"></el-input>
                </el-form-item>

              </el-form>
              <div slot="footer" class="dialog-footer">
                <el-button @click.native="concelEdit">返回</el-button>
                <el-button type="primary" @click.native="addServiceSubmit">提交</el-button>
              </div>
            </el-dialog>

            <el-dialog title="服务查看" v-model="serviceOrderVisible" :close-on-click-modal="false">

              <el-form ref="addServiceformEle" :model="addServiceform" label-width="80px">

                <el-form-item label="服务图例">
                  <img :src="addServiceform.Logo" alt="logo" style="width: 84px;height: 84px">
                </el-form-item>

                <el-form-item label="服务名称:">
                  <el-input v-model="addServiceform.Name" disabled></el-input>
                </el-form-item>

                <el-form-item label="服务价格:">
                  <el-input v-model="addServiceform.Price" disabled></el-input>
                </el-form-item>

                <el-form-item label="单次服务咨询次数:">
                  <el-input v-model="addServiceform.Count" disabled></el-input>
                </el-form-item>

                <el-form-item label="服务地址:">
                  <el-input v-model="addServiceform.Location" disabled></el-input>
                </el-form-item>

                <el-form-item label="服务类型:">
                  <el-select v-model="categroryType" disabled placeholder="请选择">
                    <el-option label="评估" value="1"></el-option>
                    <el-option label="训练" value="2"></el-option>
                    <el-option label="教学" value="3"></el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="病种选择:">
                  <el-select v-model="tagsArr" multiple disabled placeholder="请选择">
                    <el-option v-for="item in tagsOptions" :key="item.ID" :label="item.Name" :value="item.ID">
                    </el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="服务详情:">
                  <el-input type="textarea" v-model="addServiceform.Comments" disabled></el-input>
                </el-form-item>

              </el-form>

              <div slot="footer" class="dialog-footer">
                <el-button @click.native="canCelCheck">返回</el-button>
              </div>
            </el-dialog>

            <el-dialog title="新增服务" v-model="addServiceFormVisible" :close-on-click-modal="false">

              <el-form ref="addServiceformEle" :model="addServiceform" label-width="80px">

                <el-form-item label="服务图例">
                  <el-upload class="avatar-uploader" :action="getuploadURL()" :headers="getAuth()" :show-file-list="false" :on-success="handleAvatarScucess" :before-upload="beforeAvatarUpload">
                    <img v-if="imageUrl" :src="imageUrl" class="avatar" v-model="addServiceform.Logo" style="width: 84px;height: 84px">
                      <i v-else class="icon iconfont icon-upload" style="font-size: 50px"></i>
                  </el-upload>
                </el-form-item>

                <el-form-item label="服务名称:">
                  <el-input v-model="addServiceform.Name"></el-input>
                </el-form-item>

                <el-form-item label="服务价格:">
                  <el-input v-model="addServiceform.Price"></el-input>
                </el-form-item>

                <el-form-item label="单次服务咨询次数:">
                  <el-input v-model="addServiceform.Count"></el-input>
                </el-form-item>

                <el-form-item label="服务地址:">
                  <el-input v-model="addServiceform.Location"></el-input>
                </el-form-item>

                <el-form-item label="服务类型:">
                  <el-select v-model="categroryType" placeholder="请选择">
                    <el-option label="评估" value="1"></el-option>
                    <el-option label="训练" value="2"></el-option>
                    <el-option label="教学" value="3"></el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="病种选择:">
                  <el-select v-model="tagsArr" multiple placeholder="请选择">
                    <el-option v-for="item in tagsOptions" :key="item.ID" :label="item.Name" :value="item.ID">
                    </el-option>
                  </el-select>

                </el-form-item>

                <el-form-item label="服务详情:">
                  <el-input type="textarea" v-model="addServiceform.Comments"></el-input>
                </el-form-item>

              </el-form>
              <div slot="footer" class="dialog-footer">
                <el-button @click.native="addServiceCancel()">返回</el-button>
                <el-button type="primary" @click.native="addServiceSubmit()">提交</el-button>
              </div>
            </el-dialog>

            <div class="toolArea">
              <el-button style="" @click="addService()">新增服务</el-button>
            </div>

            <el-card class="cardBox colorHeader" :body-style="{ padding: '0px'}">
                <div class="tableWrap">
                    <el-table :data="drServiceList" style="width: 100%">

                        <el-table-column label="服务名称" width="180" prop="Name">
                        </el-table-column>

                        <el-table-column prop="Status" label="状态" :formatter="formatStatus" :filters="[
                                    { text: '等待审核', value: 1 },
                                    { text: '审核失败', value: 2 },
                                    { text: '审核通过', value: 3 },
                                    { text: '已上线', value: 4 },
                                    { text: '已下线', value: 5 }
                                    ]" :filter-method="filterTag">
                        </el-table-column>

                        <el-table-column prop="Location" label="地点" show-overflow-tooltip width="200">
                        </el-table-column>

                        <el-table-column prop="DeptName" label="科室" >
                        </el-table-column>

                        <el-table-column prop="Tags" label="病种" show-overflow-tooltip :formatter="getTagInfo">
                        </el-table-column>

                        <el-table-column label="详情" >
                            <template scope="scope">
                                <el-button @click.native.prevent="checkList(scope.$index, scope.row)" type="text" size="small">
                                    <i class="el-icon-document"></i>
                                </el-button>
                            </template>
                        </el-table-column>

                        <el-table-column label="编辑" >
                            <template scope="scope">
                                <el-button @click.native.prevent="editgo(scope.$index, scope.row)" type="text" size="small">
                                    <i class="el-icon-edit"></i>
                                </el-button>
                            </template>
                        </el-table-column>

                        <el-table-column label="删除" >
                            <template scope="scope">
                                <el-button @click.native.prevent="deleteRow(scope.$index, scope.row)" type="text" size="small">
                                    <i class="el-icon-delete"></i>
                                </el-button>
                            </template>
                        </el-table-column>

                    </el-table>
                </div>
                <el-pagination layout="prev, pager, next" @current-change="handleCurrentChange" :page-size="serviceListPageSize" :total="total" style="float:right;"></el-pagination>
            </el-card>

          </div>
        </div>
      </div>
    </div>

  </div>
</template>

<script>
import api from '../../../api/index.js';
import ConsultManage from '../../../components/MyServiceManageConsult.vue';

export default {
  name: 'serviceManage',
  components: {
    ConsultManage
  },
  data() {
    return {
      currentTab: 0,
      consultData: [],
      tabs: ['咨询管理', '服务管理'],
      drServiceList: [],
      serviceOrderData: [],
      total: 1,
      filterStatus: '',
      orderTotal: '',
      serviceOrderVisible: false,
      addServiceFormVisible: false,
      editFormVisible: false,
      serviceID: '',
      imageUrl: '',
      imgMsg: '',
      tagsOptions: [],
      serivceListPageIndex: 1,
      serviceListPageSize: 10,
      tagsArr: [],
      categroryType: '',
      addServiceform: {
        Name: '',
        Logo: '',
        Price: '',
        Type: '',
        Comments: '',
        Location: '',
        Count: '',
        Tags: []
      }
    };
  },
    computed: {
      chosedTags: function () {
          let tags = [];
          for (let i = 0; i < this.tagsArr.length; i++) {
              tags.push({
                  TagID: this.tagsArr[i]
              });
          }
          return tags
      }
    },
  methods: {
    filterTag(value, row) {
      return row.Status === value;
    },
    setCategroryType() {
      this.categroryType = String(this.addServiceform.Type);
    },
    getTagesArr(obj) {
      let tagsArr = []
      for (let ele in obj) {
        tagsArr.push(obj[ele].TagID);
      }
      this.tagsArr = tagsArr;
    },
    checkList(index, row) {
      this.addServiceform = row;
      console.log(typeof this.addServiceform.Type);
      this.getTagesArr(this.addServiceform.Tags)
      this.setCategroryType();
      this.serviceOrderVisible = true;
    },
    formatStatus: function (row, column) {
      var status = row.Status;
      var resulut;
      switch (status) {
        case 1:
          resulut = '等待审核';
          break;
        case 2:
          resulut = '审核失败';
          break;
        case 3:
          resulut = '审核通过';
          break;
        case 4:
          resulut = '已上线';
          break;
        case 5:
          resulut = '已下线';
          break;
      }
      return resulut;
    },
    //获取病种名称
    getTagInfo: function (row, column) {
      var tags = row.Tags;
      if (tags.length > 0) {
        return tags[0].TagName;
      }
      return '';
    },
    //获取病种列表
    getDiagnosisesList() {
      api.getDiagnosises().then(res => {
        this.tagsOptions = res.List[0].Diagnosises;
      });
    },
    getuploadURL() {
      return api.uploadIMGURL;
    },
    selectedStatus(val) {
      this.filterStatus();
    },
    filterStatus(value, row) {
      return row.Status === value;
    },
    addServiceCancel() {
        this.resetAddServiceForm();
        this.addServiceFormVisible = false;
    },
      canCelCheck() {
        this.resetAddServiceForm();
        this.serviceOrderVisible = false;
      },
      concelEdit() {
        this.resetAddServiceForm();
        this.editFormVisible = false
      },
      resetAddServiceForm() {
          this.categroryType = '';
          this.tagsArr = [];
          let obj = {
              Name: '',
              Logo: '',
              Price: '',
              Type: '',
              Comments: '',
              Location: '',
              Count: '',
              Tags: []
          };
          this.addServiceform = obj;
      },
    //编辑、添加服务
    addServiceSubmit() {
      this.addServiceform.Type = Number(this.categroryType);
      console.log('this tagsArr');
      console.log(this.tagsArr);
        console.log('this chosedTags');
        console.log(this.chosedTags);

      this.addServiceform.Tags = this.chosedTags;

      console.log('this addServiceform');
      console.log(this.addServiceform)

      let foo = this.checkAddformRules(this.addServiceform);
      if (foo) {
          api.addDrService(this.addServiceform).then(res => {
              let msg = res.Msg
              if (res.Code === 0) {
                  this.$message.success('保存成功');
                  this.addServiceFormVisible = false;
                  this.editFormVisible = false;
                  this.resetAddServiceForm();
                  this.getServiceList();
              } else {
                  this.$message.warning(msg);
              }
          }).catch(function (err) {
              this.$message.error('网络问题,请稍后再试');
          });
      }
    },
      checkAddformRules(arr) {
        console.log('arr');
        console.log(arr);
        let statusArr = [false,false,false,false,false,false,false,false];
        if (arr.Logo === '') {
            this.$message.warning('请上传图片');
        } else {
            statusArr[0] = true;
        }
          if (arr.Name === '') {
              this.$message.warning('请输入服务名称');
          } else {
              statusArr[1] = true;
          }

          if (Number(arr.Price) > 0) {
              statusArr[2] = true;
          } else {
              this.$message.warning('请输入正确的价格');
          }

          if (Number(arr.Count) > 0) {
              statusArr[3] = true;
          } else {
              this.$message.warning('请输入正确的咨询次数');
          }

          if (arr.Location === '') {
              this.$message.warning('请输入服务地址');
          } else {
              statusArr[4] = true;
          }

          if (arr.Type === '') {
              this.$message.warning('请选择服务类型');
          } else {
              statusArr[5] = true;
          }

          if (arr.Tags.length === 0) {
              this.$message.warning('请选择病种类型');
          } else {
              statusArr[6] = true;
          }
        if (arr.Comments === '') {
            this.$message.warning('请输入服务详情');
        } else {
            statusArr[7] = true;
        }
        let statusResult = statusArr.filter(function (ele) {
            return ele === true;
        })
          if (statusResult.length === 8) {
            return true;
          } else {
            return false;
          }
      },
    //获取医生服务列表
    getServiceList() {
      api.getDrServiceList(this.serivceListPageIndex, this.serviceListPageSize).then(res => {
        this.drServiceList = res.data.Records;
        this.total = res.data.Total;
      });
    },
    getAuth() {
      return { 'authorization': sessionStorage.getItem('accessToken') };
    },
    //编辑服务
    editgo(index, row) {
      this.addServiceform = row;
      this.imageUrl = this.addServiceform.Logo;
      console.log('this.imageUrl');
      console.log(this.imageUrl);
      this.getTagesArr(this.addServiceform.Tags);
      this.setCategroryType();
      this.editFormVisible = true;
    },
    //添加服务
    addService() {
      this.addServiceFormVisible = true;
      this.addServiceform = {
        Name: '',
        Logo: '',
        Price: '',
        Type: '',
        Comments: '',
        Location: '',
        Count: '',
        Tags: []
      };
      this.imageUrl = '';
    },
    //删除服务
    deleteRow(index, row) {
      var params = row.ID;
      api.deleteService(params).then(res => {
        var code = res.Code;
        if (code === 0) {
          this.$message.success('删除成功');
        } else if (code === 1) {
          this.$message.success('服务存在');
        } else if (code === 2) {
          this.$message.success('服务正在使用');
        } else {
          this.$message.error('操作异常');
        }
        this.getServiceList();
      });
    },
    //分页跳转
    handleCurrentChange(pageIndex) {
      this.serivceListPageIndex = pageIndex;
      this.getServiceList();
    },
    handleAvatarScucess(res, file) {
      if (res.Code === 0) {
        this.imageUrl = res.Path;
        this.addServiceform.Logo = res.Msg;
      } else {
        this.$message.error('没有找到文件');
      }
    },
    beforeAvatarUpload(file) {

    }
  },
  created() {
    this.getServiceList();
    this.getDiagnosisesList();
  }
};
</script>
<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.tabs {
  width: 100%;
  display: flex;
  align-items: stretch
}

.tabs-chose {
  width: 106px;
  height: 583px;
  border-right: 1px solid #EFEFEF
}

.tabs-content {
  width: 1080px;
  height: 583px;
}

.tabs-chose li {
  width: 105px;
  height: 70px;
  text-align: center;
  line-height: 70px;
  cursor: pointer;
}

.toolArea {
  display: flex;
  justify-content: flex-end;
  width: 1040px;
  margin: 5px auto;
}

.icon-msnui-cloud-upload {
  font-size: 60px
}

.tabs-chose .active {
  color: #48C4FC;
}
.colorHeader {
  border-top: 4px solid RGBA(49, 187, 252, 1.00)
}
  .cardBox {
    width: 1040px;
    margin: 0 auto;
  }
    .tableWrap {
        width: 100%;
        height: 460px;
    }

</style>
